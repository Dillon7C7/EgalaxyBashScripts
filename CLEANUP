#!/bin/bash

WORK_DIR="/home/encoder/w" # working directory

usage_flag=false # if true, print help
verbose_flag=false # if true, set -x
dom_flag=false # if true, delete domenic's files on remote
skip_promo_flag=false # if true, skip deleting promo(s) on remote
invalid_flag=false # if true, exit before rest of script
print_flag=false # if true, don't print a newline on invalid flags

remote_cmd='cd REMOTE_DIRECTORY;./.cleanup'

# print script usage
print_usage()
{
    echo -e "Usage: $0 [-hvDP]\n\
	-h	print this message\n\
	-v	be verbose\n\
	-D	delete files for Domenic\n\
	-P	don't delete promo(s) on beer"
}

# make sure we are in the working directory
if [ "$(pwd)" != "$WORK_DIR" ]; then
  echo "ERROR! MUST BE IN DIRECTORY: /home/encoder/w" >&2
  exit 1
fi

while getopts ':hvDP' opt
do
    case "${opt}" in
	h) usage_flag=true ;;
	v) verbose_flag=true ;;
	D) dom_flag=true ;;
	P) skip_promo_flag=true ;;
	\?) if ! "$flag"; then
			echo -en "\n"
			print_flag=true
		fi
		echo "Invalid option: -${OPTARG}" >&2
	    invalid_flag=true ;;
    esac
done

# exit to prevent the rest of the script from executing
if "$invalid_flag"; then
	echo -en "\n"
    print_usage
    exit 1
fi

# print usage message, and exit
if "$usage_flag"; then
    print_usage
    exit 2
fi

# set verbosity
if "$verbose_flag"; then
    set -x
fi

#  modify remote command to include deleting dom's files:
#+ a '-D' flag will be passed to remote .cleanup script to initiate it
if "$dom_flag"; then
    remote_cmd="${remote_cmd} -D"
fi

if "$skip_promo_flag"; then
    remote_cmd="${remote_cmd} -P"
fi

echo "Running Cleanup !!!!!!"

mv ${WORK_DIR}/done_archive/sk/out/*.mp4 ${WORK_DIR}/done_archive/sk/old/ 2>/dev/null

rm -f ${WORK_DIR}/*.mp4
rm -f ${WORK_DIR}/*.mp3
rm -f ${WORK_DIR}/*.mov
rm -f ${WORK_DIR}/ffmpeg2pass*
rm -f ${WORK_DIR}/show_live_done
/bin/bash "${WORK_DIR}/clear_space.sh"
ssh USER@REMOTE_HOST "${remote_cmd}"
