#!/bin/bash

usage="Usage: $0 YYYY-MM-DD Source_Folder segment_number(s)"

print_usage()
{
	echo "$usage" >&2
	echo "Ex: $0 2014-03-09 today 4 2" >&2
	echo "Ex: $0 2014-11-28 weekend 1 2 3" >&2
	echo "Ex: $0 2014-12-24 holiday 3 4 5 6 7" >&2
}

if [ "$#" -lt "3" ]; then
	print_usage
	exit 1
fi 

name_date=$1
source_dir=$2

# YYYY-MM-DD
date_regex="^([0-9]{4})-([0-9]{2})-([0-9]{2})$"

if [[ ! "$1" =~ $date_regex ]]; then
	echo "$0 ERROR: date must be in the format YYYY-MM-DD" >&2
	echo "---------------------------------------"
	print_usage
	exit 1
fi

month="${BASH_REMATCH[2]}"

# check month, must be <= 12
if [ "$month" -gt "12" ]; then
	echo "$0 ERROR: month must be 12 or less" >&2
	echo "---------------------------------------"
	print_usage
	exit 1
fi

day="${BASH_REMATCH[3]}"

# check day, must be <= 31
if [ "$day" -gt "31" ]; then
	echo "$0 ERROR: day must be 31 or less" >&2
	echo "---------------------------------------"
	print_usage
	exit 1
fi

# the initial regex ensures that these values are non-negative

# check source directory
# must be one of today, friday, weekend, holiday
dir_regex="^(today|friday|weekend|holiday(/[0-9]{4}-[0-9]{2}-[0-9]{2})?)$" 

if [[ ! "$source_dir" =~ $dir_regex ]]; then
	echo -e "$0 ERROR: source directory must be one of:\n\
today\nfriday\nweekend\nholiday\nholiday/yyyy-mm-dd" >&2
	echo "---------------------------------------"
	print_usage
	exit 1
fi

######################################################################

# remove $1 and $2 from list of arguments
shift 2

segment_regex="^[1-9]+$"
segment_array=()
success_array=()
failure_array=()

while (( "$#" )); do # loop through segment numbers

	echo "---------------------------------------"

	if [[ ! "$1" =~ $segment_regex ]]; then
		echo "$0 ERROR: $1 must be a number! (between 1-9 inclusive)" >&2
		echo "Skipping $1..."
		sleep 1.5s
		#shift
		#continue
	else
		segment_array+=("$1")

		./ENC $name_date $source_dir $1	
		enc_status="$?"
	
		# if ./ENC exited successfully...
		if [ "$enc_status" -eq "0" ]; then
			echo "Segment $1 complete !!!!!!"
			success_array+=("$1")
		else
			echo "$0 ERROR: something bad happened; segment $1 failed!!" >&2
			failure_array+=("$1")
		fi
	
		#shift
	fi
	
	shift
done

echo "---------------------------------------"
echo "These (valid) segments were given: ${segment_array[@]}"

if [ -n "$success_array" ]; then
	echo "These segments were processed: ${success_array[@]}"
	echo "DONE !!!!!! without failures"
fi

if [ -n "$failure_array" ]; then
	echo "These segments failed: ${failure_array[@]}" >&2
	echo "DONE !!!!!! with failures"
fi
