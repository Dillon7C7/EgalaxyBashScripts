#!/bin/bash

usage="Usage: $0 YYYY-MM-DD Source_Folder segment_number(s)"

if [ "$#" -lt "3" ]; then
	echo "$usage" >&2
	echo "Ex: $0 2014-03-09 today 4 2" >&2
	echo "Ex: $0 2014-11-28 weekend 1 2 3" >&2
	echo "Ex: $0 2014-12-24 holiday 3 4 5 6 7" >&2
	exit 1
fi 

name_date=$1
source_dir=$2

# YYYY-MM-DD
date_regex="^([0-9]{4})-([0-9]{2})-([0-9]{2})$"

if [[ ! "$1" =~ $date_regex ]]; then
	echo "ERROR: date must be in the format YYYY-MM-DD" >&2
	exit 1
fi

month="${BASH_REMATCH[2]}"

# check month, must be <= 12
if [ "$month" -gt "12" ]; then
	echo "ERROR: month must be 12 or less" >&2
	exit 1
fi

day="${BASH_REMATCH[3]}"

# check day, must be <= 31
if [ "$day" -gt "31" ]; then
	echo "ERROR: day must be 31 or less" >&2
	exit 1
fi

# the initial regex ensures that these values are non-negative

# check source directory
# must be one of today, friday, weekend, holiday
if [[ ! "$source_dir" =~ ^(today|friday|weekend|holiday)$ ]]; then
	echo -e "ERROR: source directory must be one of:\n\
today\nfriday\nweekend\nholiday" >&2
	exit 1
fi

#####################################################################

shift 2

segment_regex="^[0-9]+$"
segment_list="$@"
success_array=()
failure_array=()

while (( "$#" )); do # loop through segment numbers
	if [[ ! "$1" =~ $segment_regex ]]; then
		echo "ERROR: $1 must be a number!" >&2
		echo "Skipping $1..."
		shift
		continue
	fi
	
	./ENC $name_date $source_dir $1	

	echo "---------------------------------------"
echo "$?"
	# if ./ENC exited successfully...
	if [ "$?" -eq "0" ]; then
		echo "Segment $1 complete !!!!!!"
		success_array+=("$1")
	else
		echo "ERROR: something bad happened; segment $1 failed!!" >&2
		failure_array+=("$1")
	fi

	shift
done

echo "---------------------------------------"
echo "These segments were given: $segment_list"
echo "These segments were processed: ${success_array[@]}"

if [ -n "$failure_array" ]; then
	echo "These segments failed: ${failure_array[@]}" >&2
fi

echo "DONE !!!!!!"
